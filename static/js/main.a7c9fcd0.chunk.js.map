{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["currentTodoSlice","createSlice","name","initialState","reducers","setTodo","arg","payload","removeTodo","actions","filterSlice","query","status","setQuery","filter","action","setStatus","removeQuery","todosSlice","setTodos","store","configureStore","reducer","currentTodo","currentTodoReducer","filterReducer","todos","todosReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","todo","id","title","completed","dispatch","state","className","classNames","type","onClick","todoToSet","currentTodoActions","TodoList","useState","warning","setWarning","filtredTodos","toLowerCase","includes","filterTodos","useEffect","length","map","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","filterActions","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","email","user","setUser","userId","getUser","data","href","App","todosToSet","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7c9fcd0.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst currentTodoSlice = createSlice({\n  name: 'currentTodo',\n  initialState: null,\n  reducers: {\n    setTodo: (...arg) => arg[1].payload,\n    removeTodo: () => null,\n  },\n});\n\nexport default currentTodoSlice.reducer;\nexport const { actions } = currentTodoSlice;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = { query: '', status: 'all' };\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    setQuery: (filter, action) => ({ ...filter, query: action.payload }),\n    setStatus: (filter, action) => ({ ...filter, status: action.payload }),\n    removeQuery: (filter) => ({ ...filter, query: '' }),\n  },\n});\n\nexport default filterSlice.reducer;\nexport const { actions } = filterSlice;\n","import { createSlice } from '@reduxjs/toolkit/dist';\nimport { Todo } from '../types/Todo';\n\nconst initialState: Todo[] = [];\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    setTodos: (...arg) => arg[1].payload,\n  },\n});\n\nexport default todosSlice.reducer;\nexport const { actions } = todosSlice;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = configureStore({\n  reducer: {\n    currentTodo: currentTodoReducer,\n    filter: filterReducer,\n    todos: todosReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const { id, title, completed } = todo;\n  const dispatch = useAppDispatch();\n\n  const setTodo = (todoToSet: Todo) => dispatch(currentTodoActions.setTodo(todoToSet));\n  const currentTodo = useAppSelector(state => state.currentTodo) || { id: 0 };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': currentTodo.id === id,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-danger': !completed,\n          'has-text-success': completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => setTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={classNames({\n              'far fa-eye': currentTodo.id !== id,\n              'far fa-eye-slash': currentTodo.id === id,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\nconst filterTodos = (todos: Todo[], query: string, status: string) => {\n  return todos\n    .filter(({ title }) => title.toLowerCase().includes(query.toLowerCase()))\n    .filter(({ completed }) => {\n      switch (status) {\n        case 'active':\n          return !completed;\n        case 'completed':\n          return completed;\n        default:\n          return true;\n      }\n    });\n};\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const [warning, setWarning] = useState(false);\n  const filtredTodos = filterTodos(todos, query, status);\n\n  useEffect(() => {\n    if (filtredTodos.length === 0) {\n      setWarning(true);\n    } else {\n      setWarning(false);\n    }\n  }, [filtredTodos]);\n\n  return (\n    <>\n      {warning ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n\n          </thead>\n\n          <tbody>\n            {filtredTodos\n              .map((todo) => (\n                <TodoItem todo={todo} key={todo.id} />\n              ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const setQuery = (query: string) => dispatch(filterActions.setQuery(query));\n  const setStatus = (status: string) => dispatch(\n    filterActions.setStatus(status),\n  );\n  const { query } = useAppSelector(state => state.filter);\n  const removeQuery = () => dispatch(filterActions.removeQuery());\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => setStatus(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            setQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query\n          && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={removeQuery}\n              />\n            </span>\n          )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n};\n\ntype User = {\n  email: string;\n  name: string;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [user, setUser] = useState<User>({\n    email: '',\n    name: '',\n  });\n\n  const { name, email } = user;\n  const {\n    id,\n    completed,\n    userId,\n    title,\n  } = todo;\n\n  useEffect(() => {\n    getUser(userId)\n      .then(data => setUser(data));\n  }, []);\n\n  const dispatch = useAppDispatch();\n  const removeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {\n        !name\n          ? <Loader />\n          : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${id}`}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={removeTodo}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {\n                    completed\n                      ? <strong className=\"has-text-success\">Done</strong>\n                      : <strong className=\"has-text-danger\">Planned</strong>\n                  }\n                  {' by '}\n                  <a href={`mailto:${email}`}>{name}</a>\n                </p>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const setTodos = (todosToSet: Todo[]) => dispatch(todosActions.setTodos(todosToSet));\n\n  useEffect(() => {\n    getTodos()\n      .then(data => setTodos(data));\n  }, []);\n  const todos = useAppSelector(state => state.todos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {\n              todos.length === 0\n                ? <Loader />\n                : (\n                  <>\n                    <h1 className=\"title\">Todos:</h1>\n                    <div className=\"block\">\n                      <TodoFilter />\n                    </div>\n                    <div className=\"block\">\n                      <TodoList />\n                    </div>\n                  </>\n                )\n            }\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal todo={currentTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}